
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 09 19:08:49 CEST 2017
//----------------------------------------------------

package source;

import org.apache.log4j.*;
import java_cup.runtime.*;
import util.ParserHelper;
import util.GeneratorHelper;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.mj.runtime.Code;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 09 19:08:49 CEST 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\105\002\000\002\106\002\000\002\107" +
    "\002\000\002\002\013\000\002\002\004\000\002\003\004" +
    "\000\002\003\002\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\004\003\000\002\110\002\000\002" +
    "\006\007\000\002\012\003\000\002\012\005\000\002\013" +
    "\005\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\007\011\000\002\015\004\000\002\015\002\000" +
    "\002\016\003\000\002\017\004\000\002\017\002\000\002" +
    "\111\002\000\002\112\002\000\002\113\002\000\002\020" +
    "\017\000\002\021\003\000\002\021\002\000\002\025\003" +
    "\000\002\025\003\000\002\023\003\000\002\023\002\000" +
    "\002\024\005\000\002\024\003\000\002\022\004\000\002" +
    "\022\006\000\002\030\004\000\002\030\002\000\002\114" +
    "\002\000\002\010\006\000\002\031\005\000\002\031\003" +
    "\000\002\032\003\000\002\032\005\000\002\011\003\000" +
    "\002\033\004\000\002\033\003\000\002\033\003\000\002" +
    "\033\004\000\002\033\004\000\002\033\004\000\002\033" +
    "\004\000\002\033\004\000\002\033\005\000\002\026\003" +
    "\000\002\026\002\000\002\027\004\000\002\027\003\000" +
    "\002\101\003\000\002\101\002\000\002\115\002\000\002" +
    "\034\005\000\002\034\003\000\002\043\004\000\002\043" +
    "\003\000\002\043\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\045\003\000\002\045\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\052\003\000\002\052\002\000\002\053\003\000\002\051" +
    "\005\000\002\051\003\000\002\103\003\000\002\103\002" +
    "\000\002\116\002\000\002\054\005\000\002\056\003\000" +
    "\002\056\002\000\002\057\005\000\002\057\003\000\002" +
    "\060\003\000\002\061\005\000\002\061\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\005\000" +
    "\002\063\003\000\002\063\003\000\002\047\003\000\002" +
    "\047\003\000\002\064\003\000\002\064\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\067\005\000" +
    "\002\117\002\000\002\070\005\000\002\071\005\000\002" +
    "\035\010\000\002\073\004\000\002\073\002\000\002\102" +
    "\003\000\002\102\002\000\002\072\003\000\002\074\005" +
    "\000\002\074\003\000\002\075\003\000\002\076\005\000" +
    "\002\076\003\000\002\077\003\000\002\077\005\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\100\003\000\002\036\013" +
    "\000\002\037\004\000\002\040\006\000\002\041\007\000" +
    "\002\055\004\000\002\055\002\000\002\120\002\000\002" +
    "\065\007\000\002\066\005\000\002\104\005\000\002\104" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\004\004\005\001\002\000\004\002\334\001" +
    "\002\000\004\023\006\001\002\000\012\006\001\010\001" +
    "\023\001\060\001\001\002\000\012\006\ufffb\010\ufffb\023" +
    "\ufffb\060\ufffb\001\002\000\012\006\020\010\021\023\012" +
    "\060\017\001\002\000\004\023\uffd8\001\002\000\064\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\051\uffd2" +
    "\052\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\001\002\000" +
    "\012\006\ufff8\010\ufff8\023\ufff8\060\ufff8\001\002\000\012" +
    "\006\ufffc\010\ufffc\023\ufffc\060\ufffc\001\002\000\012\006" +
    "\ufffa\010\ufffa\023\ufffa\060\ufffa\001\002\000\012\006\ufff9" +
    "\010\ufff9\023\ufff9\060\ufff9\001\002\000\012\016\000\022" +
    "\000\023\000\061\000\001\002\000\004\023\037\001\002" +
    "\000\004\023\012\001\002\000\004\023\ufff6\001\002\000" +
    "\004\023\025\001\002\000\006\051\ufff4\052\035\001\002" +
    "\000\004\041\030\001\002\000\004\051\027\001\002\000" +
    "\012\006\ufff5\010\ufff5\023\ufff5\060\ufff5\001\002\000\010" +
    "\062\031\063\034\064\033\001\002\000\006\051\ufff1\052" +
    "\ufff1\001\002\000\006\051\ufff2\052\ufff2\001\002\000\006" +
    "\051\uffef\052\uffef\001\002\000\006\051\ufff0\052\ufff0\001" +
    "\002\000\004\023\025\001\002\000\004\051\ufff3\001\002" +
    "\000\006\020\041\060\uffec\001\002\000\004\060\043\001" +
    "\002\000\004\023\012\001\002\000\004\060\uffed\001\002" +
    "\000\004\023\012\001\002\000\012\016\uffe9\022\uffe9\023" +
    "\uffe9\061\uffe9\001\002\000\004\061\315\001\002\000\012" +
    "\016\uffe3\022\047\023\uffe3\061\uffeb\001\002\000\006\016" +
    "\uffe4\023\uffe4\001\002\000\012\016\uffea\022\uffea\023\uffea" +
    "\061\uffea\001\002\000\006\016\054\023\012\001\002\000" +
    "\004\023\uffe8\001\002\000\004\023\uffe1\001\002\000\004" +
    "\023\uffe2\001\002\000\004\023\056\001\002\000\004\054" +
    "\uffe7\001\002\000\004\054\060\001\002\000\006\023\012" +
    "\055\uffdf\001\002\000\004\023\312\001\002\000\006\052" +
    "\uffdd\055\uffdd\001\002\000\006\052\310\055\uffe0\001\002" +
    "\000\004\055\uffe6\001\002\000\004\055\066\001\002\000" +
    "\006\023\uffd9\060\uffd9\001\002\000\006\023\012\060\070" +
    "\001\002\000\026\005\107\011\103\013\110\014\073\015" +
    "\101\017\116\021\074\023\075\060\114\061\uffc7\001\002" +
    "\000\006\023\uffda\060\uffda\001\002\000\030\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2" +
    "\053\171\054\uff74\056\uff90\001\002\000\004\054\274\001" +
    "\002\000\004\051\273\001\002\000\072\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034" +
    "\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94" +
    "\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051" +
    "\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94" +
    "\001\002\000\004\051\272\001\002\000\004\051\271\001" +
    "\002\000\004\051\270\001\002\000\022\012\uffaa\023\uffaa" +
    "\025\125\051\uffae\054\uffaa\062\uffaa\063\uffaa\064\uffaa\001" +
    "\002\000\030\005\uffd0\007\uffd0\011\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\017\uffd0\021\uffd0\023\uffd0\060\uffd0\061\uffd0\001" +
    "\002\000\004\054\257\001\002\000\030\005\uffcf\007\uffcf" +
    "\011\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf\021\uffcf\023" +
    "\uffcf\060\uffcf\061\uffcf\001\002\000\072\024\uff93\025\uff93" +
    "\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034" +
    "\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051" +
    "\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\057\uff93" +
    "\001\002\000\006\051\uffc0\055\uffc0\001\002\000\004\051" +
    "\256\001\002\000\004\054\250\001\002\000\026\005\uffc5" +
    "\011\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\021\uffc5\023" +
    "\uffc5\060\uffc5\061\uffc5\001\002\000\004\061\247\001\002" +
    "\000\004\051\246\001\002\000\026\005\107\011\103\013" +
    "\110\014\073\015\101\017\116\021\074\023\075\060\114" +
    "\061\uffc7\001\002\000\072\024\uff92\025\uff92\026\uff92\027" +
    "\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92" +
    "\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92" +
    "\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92\001\002\000" +
    "\004\054\121\001\002\000\026\005\107\011\103\013\110" +
    "\014\073\015\101\017\116\021\074\023\075\060\114\061" +
    "\uffc8\001\002\000\026\005\uffc6\011\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\017\uffc6\021\uffc6\023\uffc6\060\uffc6\061\uffc6\001" +
    "\002\000\006\023\075\051\uffc3\001\002\000\004\051\124" +
    "\001\002\000\006\051\uffc4\055\uffc4\001\002\000\022\012" +
    "\uffaa\023\uffaa\025\125\051\uff89\054\uffaa\062\uffaa\063\uffaa" +
    "\064\uffaa\001\002\000\016\012\uffab\023\uffab\054\uffab\062" +
    "\uffab\063\uffab\064\uffab\001\002\000\010\040\uff86\051\uff86" +
    "\055\uff86\001\002\000\010\040\242\051\uff88\055\uff88\001" +
    "\002\000\012\037\uff83\040\uff83\051\uff83\055\uff83\001\002" +
    "\000\004\051\uff8a\001\002\000\026\031\240\032\232\033" +
    "\234\034\236\035\235\036\233\037\uff82\040\uff82\051\uff82" +
    "\055\uff82\001\002\000\004\051\226\001\002\000\012\037" +
    "\224\040\uff85\051\uff85\055\uff85\001\002\000\016\012\uffad" +
    "\023\uffad\054\uffad\062\uffad\063\uffad\064\uffad\001\002\000" +
    "\016\012\137\023\075\054\151\062\147\063\144\064\145" +
    "\001\002\000\004\023\012\001\002\000\056\024\uff9f\025" +
    "\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f" +
    "\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\042\uff9f\043" +
    "\uff9f\044\uff9f\045\uff9f\046\uff9f\051\uff9f\052\uff9f\055\uff9f" +
    "\057\uff9f\001\002\000\042\024\210\025\213\031\uffac\032" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\042\212\043\207\051\uffac\052\uffac\055\uffac\057\uffac\001" +
    "\002\000\056\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\051\uffa3\052\uffa3\055\uffa3\057\uffa3\001\002\000\064\024" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\051\uffa4\052\uffa4" +
    "\053\171\054\uff74\055\uffa4\056\uff90\057\uffa4\001\002\000" +
    "\056\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\051\uffa1" +
    "\052\uffa1\055\uffa1\057\uffa1\001\002\000\056\024\uffa0\025" +
    "\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\051\uffa0\052\uffa0\055\uffa0" +
    "\057\uffa0\001\002\000\042\024\uffa8\025\uffa8\031\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\042\uffa8\043\uffa8\051\uffa8\052\uffa8\055\uffa8\057\uffa8\001" +
    "\002\000\056\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2" +
    "\051\uffa2\052\uffa2\055\uffa2\057\uffa2\001\002\000\056\024" +
    "\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\051\uffa5\052\uffa5" +
    "\055\uffa5\057\uffa5\001\002\000\020\012\uffaa\023\uffaa\025" +
    "\125\054\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002\000\056" +
    "\024\uffa7\025\uffa7\026\160\027\155\030\154\031\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7" +
    "\042\uffa7\043\uffa7\044\153\045\156\046\162\051\uffa7\052" +
    "\uffa7\055\uffa7\057\uffa7\001\002\000\020\012\uffb7\023\uffb7" +
    "\025\uffb7\054\uffb7\062\uffb7\063\uffb7\064\uffb7\001\002\000" +
    "\016\012\uff95\023\uff95\054\uff95\062\uff95\063\uff95\064\uff95" +
    "\001\002\000\016\012\uff96\023\uff96\054\uff96\062\uff96\063" +
    "\uff96\064\uff96\001\002\000\020\012\uffb6\023\uffb6\025\uffb6" +
    "\054\uffb6\062\uffb6\063\uffb6\064\uffb6\001\002\000\016\012" +
    "\uff98\023\uff98\054\uff98\062\uff98\063\uff98\064\uff98\001\002" +
    "\000\016\012\uff97\023\uff97\054\uff97\062\uff97\063\uff97\064" +
    "\uff97\001\002\000\016\012\uff99\023\uff99\054\uff99\062\uff99" +
    "\063\uff99\064\uff99\001\002\000\020\012\uffb5\023\uffb5\025" +
    "\uffb5\054\uffb5\062\uffb5\063\uffb5\064\uffb5\001\002\000\016" +
    "\012\137\023\075\054\151\062\147\063\144\064\145\001" +
    "\002\000\056\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6" +
    "\051\uffa6\052\uffa6\055\uffa6\057\uffa6\001\002\000\004\055" +
    "\166\001\002\000\056\024\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\046\uff9e\051\uff9e\052\uff9e\055\uff9e\057\uff9e\001\002\000" +
    "\004\056\204\001\002\000\004\054\173\001\002\000\004" +
    "\023\172\001\002\000\072\024\uff91\025\uff91\026\uff91\027" +
    "\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91" +
    "\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044" +
    "\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91" +
    "\053\uff91\054\uff91\055\uff91\056\uff91\057\uff91\001\002\000" +
    "\022\012\uffaa\023\uffaa\025\125\054\uffaa\055\uffb3\062\uffaa" +
    "\063\uffaa\064\uffaa\001\002\000\004\055\202\001\002\000" +
    "\006\052\uffb0\055\uffb0\001\002\000\006\052\200\055\uffb2" +
    "\001\002\000\004\055\uffb4\001\002\000\020\012\uffaa\023" +
    "\uffaa\025\125\054\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002" +
    "\000\006\052\uffb1\055\uffb1\001\002\000\056\024\uff73\025" +
    "\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73" +
    "\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\042\uff73\043" +
    "\uff73\044\uff73\045\uff73\046\uff73\051\uff73\052\uff73\055\uff73" +
    "\057\uff73\001\002\000\072\024\uff8f\025\uff8f\026\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f" +
    "\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f" +
    "\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\001\002\000" +
    "\020\012\uffaa\023\uffaa\025\125\054\uffaa\062\uffaa\063\uffaa" +
    "\064\uffaa\001\002\000\004\057\206\001\002\000\072\024" +
    "\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e" +
    "\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041" +
    "\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e" +
    "\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056" +
    "\uff8e\057\uff8e\001\002\000\020\012\uffb8\023\uffb8\025\uffb8" +
    "\054\uffb8\062\uffb8\063\uffb8\064\uffb8\001\002\000\016\012" +
    "\uff9b\023\uff9b\054\uff9b\062\uff9b\063\uff9b\064\uff9b\001\002" +
    "\000\016\012\uff9c\023\uff9c\054\uff9c\062\uff9c\063\uff9c\064" +
    "\uff9c\001\002\000\020\012\uffb9\023\uffb9\025\uffb9\054\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\001\002\000\016\012\uff9a\023" +
    "\uff9a\054\uff9a\062\uff9a\063\uff9a\064\uff9a\001\002\000\016" +
    "\012\uff9d\023\uff9d\054\uff9d\062\uff9d\063\uff9d\064\uff9d\001" +
    "\002\000\016\012\137\023\075\054\151\062\147\063\144" +
    "\064\145\001\002\000\042\024\uffa9\025\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\042\uffa9\043\uffa9\051\uffa9\052\uffa9\055\uffa9\057\uffa9\001" +
    "\002\000\060\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70" +
    "\031\uff70\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\037" +
    "\uff70\040\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70" +
    "\051\uff70\052\uff70\055\uff70\056\221\057\uff70\001\002\000" +
    "\056\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72" +
    "\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040" +
    "\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72\051\uff72" +
    "\052\uff72\055\uff72\057\uff72\001\002\000\020\012\uffaa\023" +
    "\uffaa\025\125\054\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002" +
    "\000\004\057\223\001\002\000\056\024\uff71\025\uff71\026" +
    "\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71" +
    "\035\uff71\036\uff71\037\uff71\040\uff71\042\uff71\043\uff71\044" +
    "\uff71\045\uff71\046\uff71\051\uff71\052\uff71\055\uff71\057\uff71" +
    "\001\002\000\020\012\uffaa\023\uffaa\025\125\054\uffaa\062" +
    "\uffaa\063\uffaa\064\uffaa\001\002\000\012\037\uff84\040\uff84" +
    "\051\uff84\055\uff84\001\002\000\006\023\075\055\uffc3\001" +
    "\002\000\004\055\230\001\002\000\024\005\107\011\103" +
    "\013\110\014\073\015\101\017\116\021\074\023\075\060" +
    "\114\001\002\000\030\005\uff7a\007\uff7a\011\uff7a\013\uff7a" +
    "\014\uff7a\015\uff7a\017\uff7a\021\uff7a\023\uff7a\060\uff7a\061" +
    "\uff7a\001\002\000\020\012\uff7f\023\uff7f\025\uff7f\054\uff7f" +
    "\062\uff7f\063\uff7f\064\uff7f\001\002\000\020\012\uff7b\023" +
    "\uff7b\025\uff7b\054\uff7b\062\uff7b\063\uff7b\064\uff7b\001\002" +
    "\000\020\012\uff7e\023\uff7e\025\uff7e\054\uff7e\062\uff7e\063" +
    "\uff7e\064\uff7e\001\002\000\020\012\uff7c\023\uff7c\025\uff7c" +
    "\054\uff7c\062\uff7c\063\uff7c\064\uff7c\001\002\000\020\012" +
    "\uff7d\023\uff7d\025\uff7d\054\uff7d\062\uff7d\063\uff7d\064\uff7d" +
    "\001\002\000\020\012\uffaa\023\uffaa\025\125\054\uffaa\062" +
    "\uffaa\063\uffaa\064\uffaa\001\002\000\020\012\uff80\023\uff80" +
    "\025\uff80\054\uff80\062\uff80\063\uff80\064\uff80\001\002\000" +
    "\012\037\uff81\040\uff81\051\uff81\055\uff81\001\002\000\020" +
    "\012\uffaa\023\uffaa\025\125\054\uffaa\062\uffaa\063\uffaa\064" +
    "\uffaa\001\002\000\010\040\uff87\051\uff87\055\uff87\001\002" +
    "\000\004\061\245\001\002\000\030\005\uffc9\007\uffc9\011" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\017\uffc9\021\uffc9\023\uffc9" +
    "\060\uffc9\061\uffc9\001\002\000\030\005\uffcb\007\uffcb\011" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\017\uffcb\021\uffcb\023\uffcb" +
    "\060\uffcb\061\uffcb\001\002\000\012\016\uffe5\022\uffe5\023" +
    "\uffe5\061\uffe5\001\002\000\020\012\uffaa\023\uffaa\025\125" +
    "\054\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002\000\006\052" +
    "\252\055\uff75\001\002\000\004\062\255\001\002\000\004" +
    "\055\254\001\002\000\004\051\uff77\001\002\000\004\055" +
    "\uff76\001\002\000\030\005\uffce\007\uffce\011\uffce\013\uffce" +
    "\014\uffce\015\uffce\017\uffce\021\uffce\023\uffce\060\uffce\061" +
    "\uffce\001\002\000\020\012\uffaa\023\uffaa\025\125\054\uffaa" +
    "\062\uffaa\063\uffaa\064\uffaa\001\002\000\004\055\261\001" +
    "\002\000\024\005\107\011\103\013\110\014\073\015\101" +
    "\017\116\021\074\023\075\060\114\001\002\000\030\005" +
    "\uff8b\007\263\011\uff8b\013\uff8b\014\uff8b\015\uff8b\017\uff8b" +
    "\021\uff8b\023\uff8b\060\uff8b\061\uff8b\001\002\000\024\005" +
    "\107\011\103\013\110\014\073\015\101\017\116\021\074" +
    "\023\075\060\114\001\002\000\030\005\uff8d\007\uff8d\011" +
    "\uff8d\013\uff8d\014\uff8d\015\uff8d\017\uff8d\021\uff8d\023\uff8d" +
    "\060\uff8d\061\uff8d\001\002\000\030\005\uff8c\007\uff8c\011" +
    "\uff8c\013\uff8c\014\uff8c\015\uff8c\017\uff8c\021\uff8c\023\uff8c" +
    "\060\uff8c\061\uff8c\001\002\000\004\051\uffaf\001\002\000" +
    "\004\051\uff79\001\002\000\030\005\uffca\007\uffca\011\uffca" +
    "\013\uffca\014\uffca\015\uffca\017\uffca\021\uffca\023\uffca\060" +
    "\uffca\061\uffca\001\002\000\030\005\uffcc\007\uffcc\011\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\017\uffcc\021\uffcc\023\uffcc\060" +
    "\uffcc\061\uffcc\001\002\000\030\005\uffd1\007\uffd1\011\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\017\uffd1\021\uffd1\023\uffd1\060" +
    "\uffd1\061\uffd1\001\002\000\030\005\uffcd\007\uffcd\011\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\017\uffcd\021\uffcd\023\uffcd\060" +
    "\uffcd\061\uffcd\001\002\000\004\023\075\001\002\000\010" +
    "\053\171\055\276\056\uff90\001\002\000\004\051\uff78\001" +
    "\002\000\022\041\303\042\212\043\207\044\153\045\156" +
    "\046\162\047\300\050\302\001\002\000\006\051\uffbe\055" +
    "\uffbe\001\002\000\006\051\uffc1\055\uffc1\001\002\000\006" +
    "\051\uffbd\055\uffbd\001\002\000\020\012\uffbc\023\uffbc\025" +
    "\uffbc\054\uffbc\062\uffbc\063\uffbc\064\uffbc\001\002\000\020" +
    "\012\uffba\023\uffba\025\uffba\054\uffba\062\uffba\063\uffba\064" +
    "\uffba\001\002\000\020\012\uffaa\023\uffaa\025\125\054\uffaa" +
    "\062\uffaa\063\uffaa\064\uffaa\001\002\000\020\012\uffbb\023" +
    "\uffbb\025\uffbb\054\uffbb\062\uffbb\063\uffbb\064\uffbb\001\002" +
    "\000\006\051\uffbf\055\uffbf\001\002\000\004\023\012\001" +
    "\002\000\006\052\uffde\055\uffde\001\002\000\010\052\uffdc" +
    "\055\uffdc\056\313\001\002\000\004\057\314\001\002\000" +
    "\006\052\uffdb\055\uffdb\001\002\000\012\006\uffee\010\uffee" +
    "\023\uffee\060\uffee\001\002\000\012\016\uffe9\022\uffe9\023" +
    "\uffe9\061\uffe9\001\002\000\004\061\uffff\001\002\000\012" +
    "\016\uffe3\022\047\023\uffe3\061\ufff7\001\002\000\004\061" +
    "\322\001\002\000\004\002\ufffe\001\002\000\004\023\326" +
    "\001\002\000\006\051\uffd5\052\uffd5\001\002\000\006\051" +
    "\332\052\331\001\002\000\010\051\uffd4\052\uffd4\056\327" +
    "\001\002\000\004\057\330\001\002\000\006\051\uffd3\052" +
    "\uffd3\001\002\000\004\023\326\001\002\000\020\006\uffd7" +
    "\010\uffd7\016\uffd7\022\uffd7\023\uffd7\060\uffd7\061\uffd7\001" +
    "\002\000\006\051\uffd6\052\uffd6\001\002\000\004\002\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\105\006\001\001\000\004\003\007" +
    "\001\001\000\014\005\013\006\014\007\015\010\012\011" +
    "\010\001\001\000\004\114\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\106\315\001\001\000\002\001\001" +
    "\000\004\011\021\001\001\000\004\110\022\001\001\000" +
    "\006\012\025\013\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\035\013\023\001" +
    "\001\000\002\001\001\000\004\015\037\001\001\000\002" +
    "\001\001\000\004\011\041\001\001\000\002\001\001\000" +
    "\006\010\043\011\010\001\001\000\006\016\044\017\045" +
    "\001\001\000\002\001\001\000\006\020\047\021\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\052" +
    "\025\051\001\001\000\004\111\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\112\056" +
    "\001\001\000\002\001\001\000\012\011\060\022\061\023" +
    "\063\024\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\113\064\001\001\000\002\001" +
    "\001\000\004\030\066\001\001\000\006\010\070\011\010" +
    "\001\001\000\034\026\111\027\116\033\110\034\075\035" +
    "\101\036\103\037\076\040\112\041\077\042\071\065\105" +
    "\067\104\070\114\001\001\000\002\001\001\000\010\115" +
    "\276\117\166\120\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\054\265\056\134\103\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\026\243\027\116\033\110\034\075" +
    "\035\101\036\103\037\076\040\112\041\077\042\071\065" +
    "\105\067\104\070\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\033\117\034\075\035\101\036\103\037" +
    "\076\040\112\041\077\042\071\065\105\067\104\070\114" +
    "\001\001\000\002\001\001\000\016\034\122\042\071\065" +
    "\105\067\104\070\114\101\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\054\131\056\134\072\130\074" +
    "\126\075\125\076\133\077\127\102\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\100\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\116\135\001\001\000" +
    "\024\042\142\057\140\060\145\061\151\062\147\065\141" +
    "\066\137\067\104\070\114\001\001\000\004\011\216\001" +
    "\001\000\002\001\001\000\010\045\210\047\213\063\214" +
    "\001\001\000\002\001\001\000\006\117\166\120\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\054\164\056" +
    "\134\001\001\000\010\046\156\050\160\064\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\042\142\062\163\065" +
    "\141\066\137\067\104\070\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\051\175\052\173\053\176\054\174\056\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\054\200\056\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\054\204\056\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\042\142\060\215\061\151\062\147\065\141\066\137" +
    "\067\104\070\114\001\001\000\002\001\001\000\004\104" +
    "\217\001\001\000\002\001\001\000\006\054\221\056\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\054" +
    "\131\056\134\077\224\001\001\000\002\001\001\000\016" +
    "\034\122\042\071\065\105\067\104\070\114\101\226\001" +
    "\001\000\002\001\001\000\030\033\230\034\075\035\101" +
    "\036\103\037\076\040\112\041\077\042\071\065\105\067" +
    "\104\070\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\054\240\056\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\054\131\056\134\075" +
    "\242\076\133\077\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\054\250\056\134\001\001\000\004\055\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\054\131" +
    "\056\134\072\257\074\126\075\125\076\133\077\127\001" +
    "\001\000\002\001\001\000\030\033\261\034\075\035\101" +
    "\036\103\037\076\040\112\041\077\042\071\065\105\067" +
    "\104\070\114\001\001\000\004\073\263\001\001\000\030" +
    "\033\264\034\075\035\101\036\103\037\076\040\112\041" +
    "\077\042\071\065\105\067\104\070\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\042\274\067\104\070\114\001" +
    "\001\000\004\117\166\001\001\000\002\001\001\000\012" +
    "\043\300\044\304\045\305\046\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\054\306\056\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\060\022\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\316" +
    "\017\317\001\001\000\004\107\320\001\001\000\006\020" +
    "\047\021\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\324\032\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\332\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 4;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init();
	parserHelper.initBool();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	Logger log = Logger.getLogger(getClass());

	ParserHelper parserHelper = new ParserHelper(this);
	GeneratorHelper genHelper = new GeneratorHelper(parserHelper);
	
	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
    	parserHelper.errorDetected();
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
    	parserHelper.errorDetected();
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	parserHelper.errorDetected();
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
	}

	public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // IndexingExpressionOpt ::= 
            {
              Obj RESULT =null;
		
							parser.report_error("Operator new must construct an array. Classes not supported." , null);
							RESULT = Tab.noObj;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IndexingExpressionOpt",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // IndexingExpressionOpt ::= LINDEX Expression RINDEX 
            {
              Obj RESULT =null;
		int IndexExprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int IndexExprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj IndexExpr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
							RESULT = IndexExpr;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IndexingExpressionOpt",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ConstructorCall ::= NEW Type IndexingExpressionOpt 
            {
              Obj RESULT =null;
		int ArrayTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int ArrayTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj ArrayType = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int IndexExprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int IndexExprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj IndexExpr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						if(IndexExpr.getType().getKind() != Struct.Int)
							parser.report_error("Constructor indexing expression must return an integer. (line " + IndexExprleft + ")", null);
						parser.genHelper.newArray = true;
						Code.put(Code.newarray);
						if(ArrayType.getType().getKind() == Struct.Int)
							Code.put(1);
						else
							Code.put(0);
						RESULT = new Obj(Obj.Var, "TempArray", new Struct(Struct.Array, ArrayType.getType()));
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstructorCall",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // FunctionCall ::= Designator NT$11 LPAREN ActualParamListOpt RPAREN 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int FunctionObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int FunctionObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj FunctionObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int ParamNumberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int ParamNumberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer ParamNumber = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					Obj functionObj = parser.parserHelper.methodInvocationStack.pop();
					parser.parserHelper.formalParameterPositionStack.pop();
					if(ParamNumber != functionObj.getLevel())
						parser.report_error("Parameter number mismatch at line " + ParamNumberleft, null);
					RESULT = functionObj;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FunctionCall",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$11 ::= 
            {
              Obj RESULT =null;
		int FunctionObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int FunctionObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj FunctionObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					if(FunctionObj == Tab.noObj || FunctionObj.getKind() != Obj.Meth)
						parser.report_error(FunctionObj.getName() + " is not a method! (line "+ FunctionObjleft + ")", null);
					parser.parserHelper.methodInvocationStack.push(FunctionObj);
					parser.parserHelper.formalParameterPositionStack.push(1);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",78, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NumConstOpt ::= 
            {
              Integer RESULT =null;
		
					RESULT = 0;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumConstOpt",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NumConstOpt ::= COMMA NUMCONST 
            {
              Integer RESULT =null;
		int Widthleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Widthright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer Width = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = Width;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumConstOpt",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PrintStatement ::= PRINT LPAREN Expression NumConstOpt RPAREN 
            {
              Object RESULT =null;
		int Exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int Exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj Expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int Widthleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int Widthright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer Width = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
						if(Expr.getType().getKind() != Struct.Int && Expr.getType().getKind() != Struct.Char && Expr.getType().getKind() != Struct.Bool)
							parser.report_error("Print statement can only read int char or bool types (line "+ Exprleft + ")", null);

						if(Width == 0)
							Width = 5;

						Code.loadConst(Width.intValue());

						if(Expr.getType() == Tab.charType)
							Code.put(Code.bprint);
						else
							Code.put(Code.print);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintStatement",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ReadStatement ::= READ LPAREN Designator RPAREN 
            {
              Object RESULT =null;
		int Designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int Designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj Designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
						if(Designator.getType().getKind() != Struct.Int && Designator.getType().getKind() != Struct.Char && Designator.getType().getKind() != Struct.Bool)
							parser.report_error("Read statement can only read int char or bool types (line "+ Designatorleft + ")", null);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReadStatement",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ReturnStatement ::= RETURN ExpressionOpt 
            {
              Object RESULT =null;
		int RetExprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int RetExprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj RetExpr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						if(!RetExpr.getType().assignableTo(parser.parserHelper.getMethodReturnType().getType()))
							parser.report_error("Incompatible types at return statement. (line " + RetExprleft + ")", null);

						parser.parserHelper.setReturnFound(true);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ForStatement ::= FOR LPAREN DesignatorStatementOpt SEMICOLON ConditionOpt SEMICOLON DesignatorStatementOpt RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatement",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Relop ::= LEQU 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Relop ::= LE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Relop ::= GTEQU 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Relop ::= GT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Relop ::= NOTEQU 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Relop ::= EQU 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ConditionFactor ::= Expression Relop Expression 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFactor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ConditionFactor ::= Expression 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFactor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ConditionFactorList ::= ConditionFactor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFactorList",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ConditionFactorList ::= ConditionFactorList AND ConditionFactor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFactorList",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ConditionTerm ::= ConditionFactorList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ConditionTermList ::= ConditionTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionTermList",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ConditionTermList ::= ConditionTermList OR ConditionTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionTermList",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Condition ::= ConditionTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ConditionOpt ::= 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionOpt",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ConditionOpt ::= Condition 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionOpt",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ElseOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseOpt",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ElseOpt ::= ELSE Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseOpt",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IfStatement ::= IF LPAREN Condition RPAREN Statement ElseOpt 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IndexingList ::= LINDEX Expression RINDEX 
            {
              Obj RESULT =null;
		int IndexingExpressionleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int IndexingExpressionright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj IndexingExpression = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
						RESULT = IndexingExpression;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IndexingList",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ArrayElemRef ::= Designator NT$10 IndexingList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int ArrayObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int ArrayObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj ArrayObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int Indexleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Indexright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj Index = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						if(Index == Tab.noObj || Index.getType().getKind() != Struct.Int)
							parser.report_error("Indexing expression of an array must return an integer! (line " + ArrayObjleft + ")", null);
						RESULT = new Obj(Obj.Elem, "ArrayElem", ArrayObj.getType().getElemType());
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ArrayElemRef",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$10 ::= 
            {
              Obj RESULT =null;
		int ArrayObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ArrayObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj ArrayObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

						if(ArrayObj == Tab.noObj || ArrayObj.getKind() != Obj.Var || ArrayObj.getType().getKind() != Struct.Array)
							parser.report_error("Name " + ArrayObj.getName() + " incorrectly used or not found on line " + ArrayObjleft, null);
						Code.load(ArrayObj);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ObjectPropertyRef ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int propertyNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int propertyNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String propertyName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							parser.report_error("Classes and objects have not been implemented!", null);
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ObjectPropertyRef",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Designator ::= ArrayElemRef 
            {
              Obj RESULT =null;
		int ArrayObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ArrayObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj ArrayObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					RESULT = ArrayObj;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Designator ::= ObjectPropertyRef 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int VarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int VarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String VarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Obj var = Tab.find(VarName);
					if(var == Tab.noObj || (var.getKind() != Obj.Var && var.getKind() != Obj.Con && var.getKind() != Obj.Meth))
						parser.report_error("Name " + VarName + " incorrectly used or not found on line " + VarNameleft, null);
					RESULT = var;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // MulOpLeft ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = ParserHelper.MOD; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // MulOpLeft ::= DIV 
            {
              Integer RESULT =null;
		 RESULT = ParserHelper.DIV; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // MulOpLeft ::= MUL 
            {
              Integer RESULT =null;
		 RESULT = ParserHelper.MUL; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // MulOp ::= MulOpRight 
            {
              Integer RESULT =null;
		int OpCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int OpCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer OpCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = OpCode; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // MulOp ::= MulOpLeft 
            {
              Integer RESULT =null;
		int OpCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int OpCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer OpCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = OpCode; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // AddOpLeft ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT = ParserHelper.MINUS; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // AddOpLeft ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT = ParserHelper.PLUS; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AddOp ::= AddOpRight 
            {
              Integer RESULT =null;
		int OpCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int OpCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer OpCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = OpCode; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOp",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AddOp ::= AddOpLeft 
            {
              Integer RESULT =null;
		int OpCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int OpCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer OpCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = OpCode; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOp",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Factor ::= LPAREN Expression RPAREN 
            {
              Obj RESULT =null;
		int ExpressionObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int ExpressionObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj ExpressionObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = ExpressionObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Factor ::= ConstructorCall 
            {
              Obj RESULT =null;
		int ArrayTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ArrayTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj ArrayType = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = ArrayType;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Factor ::= BOOLCONST 
            {
              Obj RESULT =null;
		int Boolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Boolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean Bool = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = parser.parserHelper.evaluateBoolConst(Bool);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Factor ::= CHARCONST 
            {
              Obj RESULT =null;
		int Charleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Charright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character Char = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = parser.parserHelper.evaluateCharConst(Char);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Factor ::= NUMCONST 
            {
              Obj RESULT =null;
		int Numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer Num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = parser.parserHelper.evaluateNumConst(Num);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Factor ::= FunctionCall 
            {
              Obj RESULT =null;
		int FunctionCallleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int FunctionCallright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj FunctionCall = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = FunctionCall; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Factor ::= Designator 
            {
              Obj RESULT =null;
		int DesignatorObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int DesignatorObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj DesignatorObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				RESULT = DesignatorObj;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FactorList ::= Factor 
            {
              Obj RESULT =null;
		int Factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj Factor = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					parser.genHelper.pushMulopRightOperand(Factor);
					RESULT = Factor;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorList",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FactorList ::= FactorList MulOp Factor 
            {
              Obj RESULT =null;
		int FactListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int FactListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj FactList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int OpCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int OpCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer OpCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int Factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj Factor = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(FactList.getType() != Tab.intType || Factor.getType() != Tab.intType)
						parser.report_error("Multiplication operations only available with int types! (line " + Factorleft + ")", null);
					if(parser.parserHelper.isCombinedOperator(OpCode) && (FactList.getKind() != Obj.Elem && (FactList.getKind() != Obj.Var || (FactList.getKind() == Obj.Var && FactList.getType().getKind() == Struct.Array))))
						parser.report_error("Left operand of a combined assign operator must be an lvalue (line " + Factorleft + ")\n" + parser.parserHelper.objToString(FactList), null);

					if(parser.parserHelper.isCombinedOperator(OpCode)) {
						parser.genHelper.pushMulopRightOperator(OpCode);
						parser.genHelper.pushMulopRightOperand(Factor);
					}
					else {
						parser.genHelper.putMulopLeftOperator(OpCode);
						parser.genHelper.putMulopLeftOperand(Factor);
					}

					RESULT = Factor;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorList",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Term ::= FactorList 
            {
              Obj RESULT =null;
		int FactListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int FactListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj FactList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			parser.genHelper.generateMulopCode();
			RESULT = FactList;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TermList ::= Term 
            {
              Obj RESULT =null;
		int Termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj Term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(!parser.genHelper.newArray && parser.parserHelper.minus)
						Code.put(Code.neg);
					RESULT = Term;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TermList ::= TermList AddOp Term 
            {
              Obj RESULT =null;
		int TermListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int TermListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj TermList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int OpCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int OpCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer OpCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int Termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj Term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(TermList.getType() != Tab.intType || Term.getType() != Tab.intType)
						parser.report_error("Addition operations only available with int types! (line " + Termleft + ")", null);
					if(parser.parserHelper.isCombinedOperator(OpCode) && (TermList.getKind() != Obj.Elem && (TermList.getKind() != Obj.Var || (TermList.getKind() == Obj.Var && TermList.getType().getKind() == Struct.Array))))
						parser.report_error("Left operand of a combined assign operator must be an lvalue (line " + Termleft + ")\n" + parser.parserHelper.objToString(TermList), null);

					RESULT = Term;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MinusOpt ::= 
            {
              Boolean RESULT =null;
		
				RESULT = false;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MinusOpt",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MinusOpt ::= MINUS 
            {
              Boolean RESULT =null;
		
				RESULT = true;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MinusOpt",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expression ::= MinusOpt NT$9 TermList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int Minusleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int Minusright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Boolean Minus = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int TermListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int TermListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj TermList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(Minus && TermList.getType() != Tab.intType)
						parser.report_error("Minus modifier can only be user with integers! (Line " + Minusleft + ")", null);
					parser.genHelper.newArray = false;
					RESULT = TermList;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expression",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$9 ::= 
            {
              Obj RESULT =null;
		int Minusleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Minusright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean Minus = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					parser.parserHelper.minus = Minus;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExpressionOpt ::= 
            {
              Obj RESULT =null;
		
						RESULT = Tab.noObj;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpressionOpt",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExpressionOpt ::= Expression 
            {
              Obj RESULT =null;
		int Exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj Expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						RESULT = Expr;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpressionOpt",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ExpressionList ::= Expression 
            {
              Integer RESULT =null;
		int Exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj Expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						Obj formalParamType = parser.parserHelper.getFormalParamType();
						if(!Expr.getType().assignableTo(formalParamType.getType()))
							parser.report_error("Incompatible types at line " + Exprleft + " Found " + parser.parserHelper.objToString(Expr) + " expected " + parser.parserHelper.objToString(formalParamType), null);
						RESULT = 1;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpressionList",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              Integer RESULT =null;
		int ParamNumberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int ParamNumberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer ParamNumber = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int Exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj Expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						Obj formalParamType = parser.parserHelper.getFormalParamType();

						if(!Expr.getType().assignableTo(formalParamType.getType()))
							parser.report_error("Incompatible types at line " + Exprleft + " Found " + parser.parserHelper.objToString(Expr) + " expected " + parser.parserHelper.objToString(formalParamType), null);
						RESULT = ParamNumber + 1; 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpressionList",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ActualParamList ::= ExpressionList 
            {
              Integer RESULT =null;
		int ExprNumberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ExprNumberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer ExprNumber = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = ExprNumber; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ActualParamListOpt ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamListOpt",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ActualParamListOpt ::= ActualParamList 
            {
              Integer RESULT =null;
		int ParamNumberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ParamNumberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer ParamNumber = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = ParamNumber; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamListOpt",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MulOpRight ::= MODASSIGN 
            {
              Integer RESULT =null;
		
					RESULT = parser.parserHelper.MODASSIGN;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MulOpRight ::= DIVASSIGN 
            {
              Integer RESULT =null;
		
					RESULT = parser.parserHelper.DIVASSIGN;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MulOpRight ::= MULASSIGN 
            {
              Integer RESULT =null;
		
					RESULT = parser.parserHelper.MULASSIGN;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // AddOpRight ::= MINUSASSIGN 
            {
              Integer RESULT =null;
		
					RESULT = parser.parserHelper.MINUSASSIGN;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpRight",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // AddOpRight ::= PLUSASSIGN 
            {
              Integer RESULT =null;
		
					RESULT = parser.parserHelper.PLUSASSIGN;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpRight",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // AssignOperator ::= MulOpRight 
            {
              Integer RESULT =null;
		int MulOpleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int MulOpright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer MulOp = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = MulOp;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOperator",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // AssignOperator ::= AddOpRight 
            {
              Integer RESULT =null;
		int AddOpleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int AddOpright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer AddOp = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = AddOp;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOperator",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // AssignOperator ::= ASSIGN 
            {
              Integer RESULT =null;
		
					RESULT = parser.parserHelper.ASSIGN;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOperator",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DesignatorOperation ::= DECREMENT 
            {
              Obj RESULT =null;
		
							Code.load(parser.parserHelper.designatorStatementDesignator);
							Code.put(Code.const_1);
							Code.put(Code.sub);
							RESULT = new Obj(Obj.Con, "inc", Tab.intType);
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorOperation",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DesignatorOperation ::= INCREMENT 
            {
              Obj RESULT =null;
		
							Code.load(parser.parserHelper.designatorStatementDesignator);
							Code.put(Code.const_1);
							Code.put(Code.add);
							RESULT = new Obj(Obj.Con, "inc", Tab.intType);
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorOperation",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DesignatorOperation ::= AssignOperator Expression 
            {
              Obj RESULT =null;
		int AssignOpCodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int AssignOpCoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer AssignOpCode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int Exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj Expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							switch(AssignOpCode)
							{
								case ParserHelper.ASSIGN:
								break;
								case ParserHelper.PLUSASSIGN:
									Code.load(parser.parserHelper.designatorStatementDesignator);
									Code.put(Code.dup_x1);
									Code.put(Code.pop);
									Code.put(Code.add);
								break;
								case ParserHelper.MINUSASSIGN:
									Code.load(parser.parserHelper.designatorStatementDesignator);
									Code.put(Code.dup_x1);
									Code.put(Code.pop);
									Code.put(Code.sub);
								break;
								case ParserHelper.MULASSIGN:
									Code.load(parser.parserHelper.designatorStatementDesignator);
									Code.put(Code.dup_x1);
									Code.put(Code.pop);
									Code.put(Code.mul);
								break;
								case ParserHelper.DIVASSIGN:
									Code.load(parser.parserHelper.designatorStatementDesignator);
									Code.put(Code.dup_x1);
									Code.put(Code.pop);
									Code.put(Code.div);
								break;
								case ParserHelper.MODASSIGN:
									Code.load(parser.parserHelper.designatorStatementDesignator);
									Code.put(Code.dup_x1);
									Code.put(Code.pop);
									Code.put(Code.rem);
								break;
							}
							RESULT = Expr;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorOperation",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DesignatorStatement ::= FunctionCall 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DesignatorStatement ::= Designator NT$8 DesignatorOperation 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int Designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int Designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj Designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int DesignatorOpleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int DesignatorOpright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj DesignatorOp = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							if(!Designator.getType().assignableTo(DesignatorOp.getType()))
								parser.report_error("Type mismatch at designator statement. (line " + Designatorleft + ")", null);
							Code.store(Designator);
							parser.parserHelper.designatorStatementDesignator = null;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$8 ::= 
            {
              Object RESULT =null;
		int Designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj Designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

							parser.parserHelper.designatorStatementDesignator = Designator;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DesignatorStatementOpt ::= 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOpt",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DesignatorStatementOpt ::= DesignatorStatement 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOpt",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StatementList ::= Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // StatementListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListOpt",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // StatementListOpt ::= StatementList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListOpt",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= LCURLYBRACE StatementListOpt RCURLYBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= PrintStatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= ReadStatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Statement ::= ReturnStatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Statement ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Statement ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= ForStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= IfStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= DesignatorStatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Type ::= IDENT 
            {
              Obj RESULT =null;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String TypeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parser.parserHelper.typeNameToObj(TypeName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VariableDeclaration ::= IDENT LINDEX RINDEX 
            {
              Object RESULT =null;
		int VarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int VarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String VarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
							if(!parser.parserHelper.isInProgram())
								parser.parserHelper.globalArrayFound();

							Obj temp = Tab.find(VarName);
							if(temp == Tab.noObj) {
								parser.report_info("Array "+ VarName +" declared on line "+ VarNameleft, null);
								Tab.insert(Obj.Var, VarName, new Struct(Struct.Array, parser.parserHelper.getCurrentTypeDeclaration().getType()));
							} else if (temp.getKind() == Obj.Meth) {
								parser.report_info("Array "+ VarName +" declared on line (has same name as a method)"+ VarNameleft, null);
								Tab.insert(Obj.Var, VarName, new Struct(Struct.Array, parser.parserHelper.getCurrentTypeDeclaration().getType()));
							} else {
								parser.report_error("A constant or a variable with the same name as " + VarName + " is already defined!", null);
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VariableDeclaration ::= IDENT 
            {
              Object RESULT =null;
		int VarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int VarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String VarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							if(!parser.parserHelper.isInProgram())
								parser.parserHelper.globalVarFound();
							else if(parser.parserHelper.isInMain())
								parser.parserHelper.localVarFound();

							if(!parser.parserHelper.isInProgram())
								parser.parserHelper.globalConstFound();
							
							Obj temp = Tab.find(VarName);
							if(temp == Tab.noObj) {
								parser.report_info("Variable "+ VarName +" declared on line "+ VarNameleft, null);
								Tab.insert(Obj.Var, VarName, parser.parserHelper.getCurrentTypeDeclaration().getType());
							} else if (temp.getKind() == Obj.Meth) {
								parser.report_info("Variable "+ VarName +" declared on line (has same name as a method)"+ VarNameleft, null);
								Tab.insert(Obj.Var, VarName, parser.parserHelper.getCurrentTypeDeclaration().getType());
							} else {
								parser.report_error("A constant or a variable with the same name as " + VarName + " is already defined!", null);
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VariableDeclarationList ::= VariableDeclaration 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VariableDeclarationList ::= VariableDeclarationList COMMA VariableDeclaration 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VariableDeclarationWrapper ::= Type NT$7 VariableDeclarationList SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 parser.parserHelper.setCurrentTypeDeclaration(null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationWrapper",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$7 ::= 
            {
              Object RESULT =null;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parser.parserHelper.setCurrentTypeDeclaration(TypeName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VariableDeclarationWrapperListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationWrapperListOpt",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VariableDeclarationWrapperListOpt ::= VariableDeclarationWrapperListOpt VariableDeclarationWrapper 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationWrapperListOpt",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FormalParam ::= Type IDENT LINDEX RINDEX 
            {
              Obj RESULT =null;
		int ParamTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int ParamTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj ParamType = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int ParamNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int ParamNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String ParamName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					parser.parserHelper.formalParamList.add(new Obj(Obj.Var, ParamName, new Struct(Struct.Array, ParamType.getType())));	
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParam",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FormalParam ::= Type IDENT 
            {
              Obj RESULT =null;
		int ParamTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int ParamTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj ParamType = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int ParamNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ParamNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String ParamName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					parser.parserHelper.formalParamList.add(new Obj(Obj.Var, ParamName, ParamType.getType()));
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParam",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormalParamList ::= FormalParam 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FormalParamList ::= FormalParamList COMMA FormalParam 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FormalParamListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamListOpt",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FormalParamListOpt ::= FormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamListOpt",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodReturnType ::= Type 
            {
              Obj RESULT =null;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						parser.parserHelper.setMethodReturnType(TypeName);
						RESULT = TypeName;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodReturnType ::= VOID 
            {
              Obj RESULT =null;
		
						parser.parserHelper.setMethodReturnType(Tab.noObj);
						RESULT = Tab.noObj; 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StaticOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticOpt",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // StaticOpt ::= STATIC 
            {
              Object RESULT =null;
		int Staticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Staticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object Static = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					parser.report_error("Static modifier not allowed for global functions. Classes not supported (line " + Staticleft + ")", null);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticOpt",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodDeclaration ::= StaticOpt MethodReturnType NT$4 IDENT NT$5 LPAREN FormalParamListOpt NT$6 RPAREN VariableDeclarationWrapperListOpt LCURLYBRACE StatementListOpt RCURLYBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;
		int MethodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int MethodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String MethodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int FormalParamsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int FormalParamsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Object FormalParams = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		
						if(parser.parserHelper.getMethodReturnType() != Tab.noObj && !parser.parserHelper.isReturnFound())
							parser.report_error("Method " + MethodName + " missing a return statement of type "+ parser.parserHelper.getMethodReturnType() + " (line " + MethodNameleft + ")", null);
						parser.parserHelper.exitingMain();
						Code.put(Code.exit);
						Code.put(Code.return_);
						Tab.chainLocalSymbols(parser.parserHelper.currentScopeStack.pop());
						Tab.closeScope();
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int MethodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int MethodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String MethodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int FormalParamsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int FormalParamsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object FormalParams = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

						if(parser.parserHelper.isInMain() && parser.parserHelper.formalParamList.size() > 0)
							parser.report_error("Main function must have zero arguments", null);

						int formalParamPosition = 1;
						for(Obj cur : parser.parserHelper.formalParamList)
						{
							Obj formalParamObj = Tab.insert(cur.getKind(), cur.getName(), cur.getType());
							formalParamObj.setFpPos(formalParamPosition++);
						}
						Tab.find(MethodName).setLevel(parser.parserHelper.formalParamList.size());
						parser.parserHelper.formalParamList.clear();
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int MethodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int MethodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String MethodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
						if(MethodName.equals("main")){
							parser.parserHelper.enteringMain();
							Code.mainPc = Code.pc;
							if(parser.parserHelper.getCurrentTypeDeclaration() != Tab.noObj)
								parser.report_error("Main function must have a void return type.", null);
						}
						
						Obj currentMethod = Tab.noObj;
						Obj temp = Tab.find(MethodName);
						if(temp == Tab.noObj)
						{
							parser.report_info("Method "+ MethodName+" declared on line "+ MethodNameleft, null);
							parser.parserHelper.currentScopeStack.push(currentMethod = Tab.insert(Obj.Meth, MethodName, parser.parserHelper.getCurrentTypeDeclaration().getType()));
							Tab.openScope();
						} else if (temp.getKind() != Obj.Meth) {
							parser.report_info("Method "+ MethodName+" declared on line (has same name as a var/const)"+ MethodNameleft, null);
							parser.parserHelper.currentScopeStack.push(currentMethod = Tab.insert(Obj.Meth, MethodName, parser.parserHelper.getCurrentTypeDeclaration().getType()));
							Tab.openScope();
						} else {
							parser.report_error("A constant or a variable with the same name as " + MethodName + " is already defined!", null);
						}
						
						Code.put(Code.enter);
			   			Code.put(currentMethod.getLevel());
			   			Code.put(Tab.currentScope().getnVars());

						parser.parserHelper.setCurrentTypeDeclaration(null);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$4 ::= 
            {
              Object RESULT =null;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parser.parserHelper.setCurrentTypeDeclaration(TypeName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MethodDeclarationListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclarationListOpt",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MethodDeclarationListOpt ::= MethodDeclarationListOpt MethodDeclaration 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclarationListOpt",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ClassBody ::= MethodDeclarationListOpt 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBody",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ExtendsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ExtendsOpt ::= EXTENDS Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ClassDeclaration ::= CLASS IDENT ExtendsOpt LCURLYBRACE VariableDeclarationWrapper ClassBody RCURLYBRACE 
            {
              Object RESULT =null;
		int ClassNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int ClassNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String ClassName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Constant ::= BOOLCONST 
            {
              Obj RESULT =null;
		int Constleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Constright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean Const = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parser.parserHelper.evaluateBoolConst(Const); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Constant ::= CHARCONST 
            {
              Obj RESULT =null;
		int Constleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Constright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character Const = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parser.parserHelper.evaluateCharConst(Const); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Constant ::= NUMCONST 
            {
              Obj RESULT =null;
		int Constleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Constright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer Const = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parser.parserHelper.evaluateNumConst(Const); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstantDeclaration ::= IDENT ASSIGN Constant 
            {
              Object RESULT =null;
		int ConstNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int ConstNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String ConstName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int Constleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Constright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj Const = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							if(!parser.parserHelper.isInProgram())
								parser.parserHelper.globalConstFound();
							
							Obj temp = Tab.find(ConstName);
							if(temp == Tab.noObj) {
								parser.report_info("Constant "+ ConstName+" declared on line "+ ConstNameleft, null);
								if(Const.getType().assignableTo(parser.parserHelper.getCurrentTypeDeclaration().getType())) {
									Obj myObj = Tab.insert(Obj.Con, ConstName, parser.parserHelper.getCurrentTypeDeclaration().getType());
									myObj.setAdr(Const.getAdr());
								}
								else {
									parser.report_error("Incompatible types", null);
								}
							} else if (temp.getKind() == Obj.Meth) {
								parser.report_info("Constant "+ ConstName+" declared on line (has same name as a method)"+ ConstNameleft, null);
								if(Const.getType().assignableTo(parser.parserHelper.getCurrentTypeDeclaration().getType())) {
									Obj myObj = Tab.insert(Obj.Con, ConstName, parser.parserHelper.getCurrentTypeDeclaration().getType());
									myObj.setAdr(Const.getAdr());
								}
								else {
									parser.report_error("Incompatible types", null);	
								}
							} else {
								parser.report_error("A constant or a variable with the same name as " + ConstName + " is already defined!", null);
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstantDeclaration",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstantDeclarationList ::= ConstantDeclaration COMMA ConstantDeclarationList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstantDeclarationList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstantDeclarationList ::= ConstantDeclaration 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstantDeclarationList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstantDeclarationWrapper ::= CONST Type NT$3 ConstantDeclarationList SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 parser.parserHelper.setCurrentTypeDeclaration(null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstantDeclarationWrapper",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              Object RESULT =null;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parser.parserHelper.setCurrentTypeDeclaration(TypeName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ProgramBody ::= MethodDeclarationListOpt 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramBody",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConcreteProgramDeclarations ::= VariableDeclarationWrapper 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConcreteProgramDeclarations",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConcreteProgramDeclarations ::= ClassDeclaration 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConcreteProgramDeclarations",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConcreteProgramDeclarations ::= ConstantDeclarationWrapper 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConcreteProgramDeclarations",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgramDeclarationListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramDeclarationListOpt",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgramDeclarationListOpt ::= ProgramDeclarationListOpt ConcreteProgramDeclarations 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramDeclarationListOpt",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= PROGRAM IDENT NT$0 ProgramDeclarationListOpt LCURLYBRACE NT$1 ProgramBody NT$2 RCURLYBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int ProgramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int ProgramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String ProgramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int ProgramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int ProgramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String ProgramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;

				parser.parserHelper.exitingProgram();
				Code.dataSize = Tab.currentScope().getnVars();
				Tab.chainLocalSymbols(parser.parserHelper.currentScopeStack.pop());
				Tab.closeScope();
				if(!parser.parserHelper.isMainDefined())
					parser.report_error("Main function not found!", null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int ProgramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int ProgramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String ProgramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
 parser.parserHelper.enteringProgram(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int ProgramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ProgramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String ProgramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
				parser.parserHelper.currentScopeStack.push(Tab.insert(Obj.Prog, ProgramName, Tab.noType));
				Tab.openScope();
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

