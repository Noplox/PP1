
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 21 15:56:02 CEST 2017
//----------------------------------------------------

package source;

import org.apache.log4j.*;
import java_cup.runtime.*;
import util.ParserHelper;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 21 15:56:02 CEST 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\105\002\000\002\106\002\000\002\002" +
    "\012\000\002\002\004\000\002\003\004\000\002\003\002" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\004\003\000\002\107\002\000\002\006\007\000\002" +
    "\012\003\000\002\012\005\000\002\013\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\007\011" +
    "\000\002\015\004\000\002\015\002\000\002\016\003\000" +
    "\002\017\004\000\002\017\002\000\002\110\002\000\002" +
    "\111\002\000\002\112\002\000\002\020\017\000\002\021" +
    "\003\000\002\021\002\000\002\025\003\000\002\025\003" +
    "\000\002\022\003\000\002\022\002\000\002\023\005\000" +
    "\002\023\003\000\002\024\004\000\002\024\006\000\002" +
    "\030\004\000\002\030\002\000\002\113\002\000\002\010" +
    "\006\000\002\031\005\000\002\031\003\000\002\032\003" +
    "\000\002\032\005\000\002\011\003\000\002\033\004\000" +
    "\002\033\003\000\002\033\003\000\002\033\004\000\002" +
    "\033\004\000\002\033\004\000\002\033\004\000\002\033" +
    "\004\000\002\033\005\000\002\026\003\000\002\026\002" +
    "\000\002\027\004\000\002\027\003\000\002\100\003\000" +
    "\002\100\002\000\002\034\004\000\002\043\004\000\002" +
    "\043\005\000\002\043\003\000\002\043\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\045\003" +
    "\000\002\045\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\051\003\000\002\051\002\000\002" +
    "\052\003\000\002\053\005\000\002\053\003\000\002\102" +
    "\003\000\002\102\002\000\002\054\004\000\002\055\003" +
    "\000\002\055\002\000\002\056\005\000\002\056\003\000" +
    "\002\057\003\000\002\061\005\000\002\061\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\005" +
    "\000\002\060\003\000\002\060\003\000\002\047\003\000" +
    "\002\047\003\000\002\063\003\000\002\063\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\066\005" +
    "\000\002\067\004\000\002\070\005\000\002\035\010\000" +
    "\002\072\004\000\002\072\002\000\002\101\003\000\002" +
    "\101\002\000\002\071\003\000\002\073\005\000\002\073" +
    "\003\000\002\074\003\000\002\075\005\000\002\075\003" +
    "\000\002\076\003\000\002\076\005\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\036\013\000\002\037" +
    "\004\000\002\040\006\000\002\041\007\000\002\103\004" +
    "\000\002\103\002\000\002\064\006\000\002\065\005\000" +
    "\002\104\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\004\004\005\001\002\000\004\002\331\001" +
    "\002\000\004\023\006\001\002\000\012\006\ufffc\010\ufffc" +
    "\023\ufffc\060\ufffc\001\002\000\012\006\017\010\020\023" +
    "\011\060\016\001\002\000\004\023\uffd9\001\002\000\010" +
    "\023\uffd3\056\uffd3\060\uffd3\001\002\000\012\006\ufff9\010" +
    "\ufff9\023\ufff9\060\ufff9\001\002\000\012\006\ufffd\010\ufffd" +
    "\023\ufffd\060\ufffd\001\002\000\012\006\ufffb\010\ufffb\023" +
    "\ufffb\060\ufffb\001\002\000\012\006\ufffa\010\ufffa\023\ufffa" +
    "\060\ufffa\001\002\000\012\016\001\022\001\023\001\061" +
    "\001\001\002\000\004\023\036\001\002\000\004\023\011" +
    "\001\002\000\004\023\ufff7\001\002\000\004\023\024\001" +
    "\002\000\006\051\ufff5\052\034\001\002\000\004\041\027" +
    "\001\002\000\004\051\026\001\002\000\012\006\ufff6\010" +
    "\ufff6\023\ufff6\060\ufff6\001\002\000\010\062\030\063\033" +
    "\064\032\001\002\000\006\051\ufff2\052\ufff2\001\002\000" +
    "\006\051\ufff3\052\ufff3\001\002\000\006\051\ufff0\052\ufff0" +
    "\001\002\000\006\051\ufff1\052\ufff1\001\002\000\004\023" +
    "\024\001\002\000\004\051\ufff4\001\002\000\006\020\040" +
    "\060\uffed\001\002\000\004\060\042\001\002\000\004\023" +
    "\011\001\002\000\004\060\uffee\001\002\000\004\023\011" +
    "\001\002\000\012\016\uffea\022\uffea\023\uffea\061\uffea\001" +
    "\002\000\004\061\312\001\002\000\012\016\uffe4\022\046" +
    "\023\uffe4\061\uffec\001\002\000\006\016\uffe5\023\uffe5\001" +
    "\002\000\012\016\uffeb\022\uffeb\023\uffeb\061\uffeb\001\002" +
    "\000\006\016\053\023\011\001\002\000\004\023\uffe9\001" +
    "\002\000\004\023\uffe2\001\002\000\004\023\uffe3\001\002" +
    "\000\004\023\055\001\002\000\004\054\uffe8\001\002\000" +
    "\004\054\057\001\002\000\006\023\011\055\uffe0\001\002" +
    "\000\004\023\307\001\002\000\006\052\uffde\055\uffde\001" +
    "\002\000\006\052\305\055\uffe1\001\002\000\004\055\064" +
    "\001\002\000\006\023\uffda\060\uffda\001\002\000\006\023" +
    "\011\060\uffe7\001\002\000\006\023\uffdb\060\uffdb\001\002" +
    "\000\004\060\070\001\002\000\026\005\105\011\102\013" +
    "\106\014\072\015\100\017\114\021\073\023\074\060\111" +
    "\061\uffc8\001\002\000\030\041\275\042\206\043\202\044" +
    "\150\045\153\046\157\047\272\050\274\053\167\054\277" +
    "\056\165\001\002\000\004\054\267\001\002\000\004\051" +
    "\266\001\002\000\072\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036" +
    "\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97" +
    "\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053" +
    "\uff97\054\uff97\055\uff97\056\uff97\057\uff97\001\002\000\004" +
    "\051\265\001\002\000\004\051\264\001\002\000\004\051" +
    "\263\001\002\000\022\012\uffad\023\uffad\025\123\051\uffb0" +
    "\054\uffad\062\uffad\063\uffad\064\uffad\001\002\000\030\005" +
    "\uffd1\007\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1" +
    "\021\uffd1\023\uffd1\060\uffd1\061\uffd1\001\002\000\004\054" +
    "\252\001\002\000\030\005\uffd0\007\uffd0\011\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\017\uffd0\021\uffd0\023\uffd0\060\uffd0\061" +
    "\uffd0\001\002\000\072\024\uff96\025\uff96\026\uff96\027\uff96" +
    "\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036" +
    "\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96" +
    "\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053" +
    "\uff96\054\uff96\055\uff96\056\uff96\057\uff96\001\002\000\004" +
    "\051\251\001\002\000\004\054\243\001\002\000\026\005" +
    "\uffc6\011\uffc6\013\uffc6\014\uffc6\015\uffc6\017\uffc6\021\uffc6" +
    "\023\uffc6\060\uffc6\061\uffc6\001\002\000\004\061\242\001" +
    "\002\000\026\005\105\011\102\013\106\014\072\015\100" +
    "\017\114\021\073\023\074\060\111\061\uffc8\001\002\000" +
    "\004\051\237\001\002\000\072\024\uff95\025\uff95\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035" +
    "\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95" +
    "\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052" +
    "\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\001\002" +
    "\000\004\054\117\001\002\000\026\005\105\011\102\013" +
    "\106\014\072\015\100\017\114\021\073\023\074\060\111" +
    "\061\uffc9\001\002\000\026\005\uffc7\011\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\017\uffc7\021\uffc7\023\uffc7\060\uffc7\061\uffc7" +
    "\001\002\000\006\023\074\051\uffc4\001\002\000\004\051" +
    "\122\001\002\000\006\051\uffc5\055\uffc5\001\002\000\022" +
    "\012\uffad\023\uffad\025\123\051\uff8d\054\uffad\062\uffad\063" +
    "\uffad\064\uffad\001\002\000\016\012\uffae\023\uffae\054\uffae" +
    "\062\uffae\063\uffae\064\uffae\001\002\000\010\040\uff8a\051" +
    "\uff8a\055\uff8a\001\002\000\010\040\235\051\uff8c\055\uff8c" +
    "\001\002\000\012\037\uff87\040\uff87\051\uff87\055\uff87\001" +
    "\002\000\004\051\uff8e\001\002\000\026\031\233\032\226" +
    "\033\227\034\231\035\230\036\225\037\uff86\040\uff86\051" +
    "\uff86\055\uff86\001\002\000\004\051\221\001\002\000\012" +
    "\037\217\040\uff89\051\uff89\055\uff89\001\002\000\016\012" +
    "\134\023\074\054\146\062\145\063\142\064\141\001\002" +
    "\000\004\023\011\001\002\000\056\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\040\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\051\uffa2\052\uffa2\055\uffa2\057\uffa2" +
    "\001\002\000\042\024\203\025\205\031\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\042\206" +
    "\043\202\051\uffaf\052\uffaf\055\uffaf\057\uffaf\001\002\000" +
    "\056\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\051\uffa6" +
    "\052\uffa6\055\uffa6\057\uffa6\001\002\000\064\024\uffa7\025" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\051\uffa7\052\uffa7\053\167" +
    "\054\166\055\uffa7\056\165\057\uffa7\001\002\000\056\024" +
    "\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\051\uffa3\052\uffa3" +
    "\055\uffa3\057\uffa3\001\002\000\056\024\uffa4\025\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4" +
    "\035\uffa4\036\uffa4\037\uffa4\040\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\051\uffa4\052\uffa4\055\uffa4\057\uffa4" +
    "\001\002\000\042\024\uffab\025\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\042\uffab" +
    "\043\uffab\051\uffab\052\uffab\055\uffab\057\uffab\001\002\000" +
    "\056\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\051\uffa8" +
    "\052\uffa8\055\uffa8\057\uffa8\001\002\000\056\024\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\051\uffa5\052\uffa5\055\uffa5" +
    "\057\uffa5\001\002\000\020\012\uffad\023\uffad\025\123\054" +
    "\uffad\062\uffad\063\uffad\064\uffad\001\002\000\056\024\uffaa" +
    "\025\uffaa\026\155\027\152\030\151\031\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\042\uffaa" +
    "\043\uffaa\044\150\045\153\046\157\051\uffaa\052\uffaa\055" +
    "\uffaa\057\uffaa\001\002\000\020\012\uffb9\023\uffb9\025\uffb9" +
    "\054\uffb9\062\uffb9\063\uffb9\064\uffb9\001\002\000\016\012" +
    "\uff98\023\uff98\054\uff98\062\uff98\063\uff98\064\uff98\001\002" +
    "\000\016\012\uff99\023\uff99\054\uff99\062\uff99\063\uff99\064" +
    "\uff99\001\002\000\020\012\uffb8\023\uffb8\025\uffb8\054\uffb8" +
    "\062\uffb8\063\uffb8\064\uffb8\001\002\000\016\012\uff9b\023" +
    "\uff9b\054\uff9b\062\uff9b\063\uff9b\064\uff9b\001\002\000\016" +
    "\012\uff9a\023\uff9a\054\uff9a\062\uff9a\063\uff9a\064\uff9a\001" +
    "\002\000\016\012\uff9c\023\uff9c\054\uff9c\062\uff9c\063\uff9c" +
    "\064\uff9c\001\002\000\020\012\uffb7\023\uffb7\025\uffb7\054" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\001\002\000\016\012\134" +
    "\023\074\054\146\062\145\063\142\064\141\001\002\000" +
    "\056\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\051\uffa9" +
    "\052\uffa9\055\uffa9\057\uffa9\001\002\000\004\055\163\001" +
    "\002\000\056\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\051\uffa1\052\uffa1\055\uffa1\057\uffa1\001\002\000\072\024" +
    "\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93" +
    "\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041" +
    "\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93" +
    "\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056" +
    "\uff93\057\uff93\001\002\000\020\012\uffad\023\uffad\025\123" +
    "\054\uffad\062\uffad\063\uffad\064\uffad\001\002\000\022\012" +
    "\uffad\023\uffad\025\123\054\uffad\055\uffb5\062\uffad\063\uffad" +
    "\064\uffad\001\002\000\004\023\170\001\002\000\072\024" +
    "\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94" +
    "\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94" +
    "\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056" +
    "\uff94\057\uff94\001\002\000\004\055\177\001\002\000\006" +
    "\052\uffb2\055\uffb2\001\002\000\006\052\175\055\uffb4\001" +
    "\002\000\004\055\uffb6\001\002\000\020\012\uffad\023\uffad" +
    "\025\123\054\uffad\062\uffad\063\uffad\064\uffad\001\002\000" +
    "\006\052\uffb3\055\uffb3\001\002\000\056\024\uff78\025\uff78" +
    "\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034" +
    "\uff78\035\uff78\036\uff78\037\uff78\040\uff78\042\uff78\043\uff78" +
    "\044\uff78\045\uff78\046\uff78\051\uff78\052\uff78\055\uff78\057" +
    "\uff78\001\002\000\004\057\201\001\002\000\072\024\uff92" +
    "\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033" +
    "\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92" +
    "\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050" +
    "\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92" +
    "\057\uff92\001\002\000\020\012\uffba\023\uffba\025\uffba\054" +
    "\uffba\062\uffba\063\uffba\064\uffba\001\002\000\016\012\uff9e" +
    "\023\uff9e\054\uff9e\062\uff9e\063\uff9e\064\uff9e\001\002\000" +
    "\016\012\uff9f\023\uff9f\054\uff9f\062\uff9f\063\uff9f\064\uff9f" +
    "\001\002\000\016\012\uff9d\023\uff9d\054\uff9d\062\uff9d\063" +
    "\uff9d\064\uff9d\001\002\000\020\012\uffbb\023\uffbb\025\uffbb" +
    "\054\uffbb\062\uffbb\063\uffbb\064\uffbb\001\002\000\016\012" +
    "\uffa0\023\uffa0\054\uffa0\062\uffa0\063\uffa0\064\uffa0\001\002" +
    "\000\016\012\134\023\074\054\146\062\145\063\142\064" +
    "\141\001\002\000\042\024\uffac\025\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\042" +
    "\uffac\043\uffac\051\uffac\052\uffac\055\uffac\057\uffac\001\002" +
    "\000\004\056\214\001\002\000\056\024\uff77\025\uff77\026" +
    "\uff77\027\uff77\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77" +
    "\035\uff77\036\uff77\037\uff77\040\uff77\042\uff77\043\uff77\044" +
    "\uff77\045\uff77\046\uff77\051\uff77\052\uff77\055\uff77\057\uff77" +
    "\001\002\000\020\012\uffad\023\uffad\025\123\054\uffad\062" +
    "\uffad\063\uffad\064\uffad\001\002\000\004\057\216\001\002" +
    "\000\056\024\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031" +
    "\uff76\032\uff76\033\uff76\034\uff76\035\uff76\036\uff76\037\uff76" +
    "\040\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76\051" +
    "\uff76\052\uff76\055\uff76\057\uff76\001\002\000\020\012\uffad" +
    "\023\uffad\025\123\054\uffad\062\uffad\063\uffad\064\uffad\001" +
    "\002\000\012\037\uff88\040\uff88\051\uff88\055\uff88\001\002" +
    "\000\006\023\074\055\uffc4\001\002\000\004\055\223\001" +
    "\002\000\024\005\105\011\102\013\106\014\072\015\100" +
    "\017\114\021\073\023\074\060\111\001\002\000\030\005" +
    "\uff7e\007\uff7e\011\uff7e\013\uff7e\014\uff7e\015\uff7e\017\uff7e" +
    "\021\uff7e\023\uff7e\060\uff7e\061\uff7e\001\002\000\020\012" +
    "\uff7f\023\uff7f\025\uff7f\054\uff7f\062\uff7f\063\uff7f\064\uff7f" +
    "\001\002\000\020\012\uff83\023\uff83\025\uff83\054\uff83\062" +
    "\uff83\063\uff83\064\uff83\001\002\000\020\012\uff82\023\uff82" +
    "\025\uff82\054\uff82\062\uff82\063\uff82\064\uff82\001\002\000" +
    "\020\012\uff80\023\uff80\025\uff80\054\uff80\062\uff80\063\uff80" +
    "\064\uff80\001\002\000\020\012\uff81\023\uff81\025\uff81\054" +
    "\uff81\062\uff81\063\uff81\064\uff81\001\002\000\020\012\uffad" +
    "\023\uffad\025\123\054\uffad\062\uffad\063\uffad\064\uffad\001" +
    "\002\000\020\012\uff84\023\uff84\025\uff84\054\uff84\062\uff84" +
    "\063\uff84\064\uff84\001\002\000\012\037\uff85\040\uff85\051" +
    "\uff85\055\uff85\001\002\000\020\012\uffad\023\uffad\025\123" +
    "\054\uffad\062\uffad\063\uffad\064\uffad\001\002\000\010\040" +
    "\uff8b\051\uff8b\055\uff8b\001\002\000\030\005\uffcc\007\uffcc" +
    "\011\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\021\uffcc\023" +
    "\uffcc\060\uffcc\061\uffcc\001\002\000\004\061\241\001\002" +
    "\000\030\005\uffca\007\uffca\011\uffca\013\uffca\014\uffca\015" +
    "\uffca\017\uffca\021\uffca\023\uffca\060\uffca\061\uffca\001\002" +
    "\000\012\016\uffe6\022\uffe6\023\uffe6\061\uffe6\001\002\000" +
    "\020\012\uffad\023\uffad\025\123\054\uffad\062\uffad\063\uffad" +
    "\064\uffad\001\002\000\006\052\245\055\uff79\001\002\000" +
    "\004\062\250\001\002\000\004\055\247\001\002\000\004" +
    "\051\uff7b\001\002\000\004\055\uff7a\001\002\000\030\005" +
    "\uffcf\007\uffcf\011\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf" +
    "\021\uffcf\023\uffcf\060\uffcf\061\uffcf\001\002\000\020\012" +
    "\uffad\023\uffad\025\123\054\uffad\062\uffad\063\uffad\064\uffad" +
    "\001\002\000\004\055\254\001\002\000\024\005\105\011" +
    "\102\013\106\014\072\015\100\017\114\021\073\023\074" +
    "\060\111\001\002\000\030\005\uff8f\007\256\011\uff8f\013" +
    "\uff8f\014\uff8f\015\uff8f\017\uff8f\021\uff8f\023\uff8f\060\uff8f" +
    "\061\uff8f\001\002\000\024\005\105\011\102\013\106\014" +
    "\072\015\100\017\114\021\073\023\074\060\111\001\002" +
    "\000\030\005\uff91\007\uff91\011\uff91\013\uff91\014\uff91\015" +
    "\uff91\017\uff91\021\uff91\023\uff91\060\uff91\061\uff91\001\002" +
    "\000\030\005\uff90\007\uff90\011\uff90\013\uff90\014\uff90\015" +
    "\uff90\017\uff90\021\uff90\023\uff90\060\uff90\061\uff90\001\002" +
    "\000\004\051\uffb1\001\002\000\004\051\uff7d\001\002\000" +
    "\030\005\uffcb\007\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\017\uffcb\021\uffcb\023\uffcb\060\uffcb\061\uffcb\001\002\000" +
    "\030\005\uffcd\007\uffcd\011\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\017\uffcd\021\uffcd\023\uffcd\060\uffcd\061\uffcd\001\002\000" +
    "\030\005\uffd2\007\uffd2\011\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\017\uffd2\021\uffd2\023\uffd2\060\uffd2\061\uffd2\001\002\000" +
    "\030\005\uffce\007\uffce\011\uffce\013\uffce\014\uffce\015\uffce" +
    "\017\uffce\021\uffce\023\uffce\060\uffce\061\uffce\001\002\000" +
    "\004\023\074\001\002\000\010\053\167\055\271\056\165" +
    "\001\002\000\004\051\uff7c\001\002\000\006\051\uffc0\055" +
    "\uffc0\001\002\000\006\051\uffc3\055\uffc3\001\002\000\006" +
    "\051\uffbf\055\uffbf\001\002\000\020\012\uffbe\023\uffbe\025" +
    "\uffbe\054\uffbe\062\uffbe\063\uffbe\064\uffbe\001\002\000\020" +
    "\012\uffbc\023\uffbc\025\uffbc\054\uffbc\062\uffbc\063\uffbc\064" +
    "\uffbc\001\002\000\022\012\uffad\023\uffad\025\123\054\uffad" +
    "\055\uffb5\062\uffad\063\uffad\064\uffad\001\002\000\020\012" +
    "\uffad\023\uffad\025\123\054\uffad\062\uffad\063\uffad\064\uffad" +
    "\001\002\000\020\012\uffbd\023\uffbd\025\uffbd\054\uffbd\062" +
    "\uffbd\063\uffbd\064\uffbd\001\002\000\006\051\uffc2\055\uffc2" +
    "\001\002\000\004\055\304\001\002\000\006\051\uffc1\055" +
    "\uffc1\001\002\000\004\023\011\001\002\000\006\052\uffdf" +
    "\055\uffdf\001\002\000\010\052\uffdd\055\uffdd\056\310\001" +
    "\002\000\004\057\311\001\002\000\006\052\uffdc\055\uffdc" +
    "\001\002\000\012\006\uffef\010\uffef\023\uffef\060\uffef\001" +
    "\002\000\012\016\uffea\022\uffea\023\uffea\061\uffea\001\002" +
    "\000\004\061\000\001\002\000\012\016\uffe4\022\046\023" +
    "\uffe4\061\ufff8\001\002\000\004\061\317\001\002\000\004" +
    "\002\uffff\001\002\000\004\023\323\001\002\000\006\051" +
    "\uffd6\052\uffd6\001\002\000\006\051\327\052\326\001\002" +
    "\000\010\051\uffd5\052\uffd5\056\324\001\002\000\004\057" +
    "\325\001\002\000\006\051\uffd4\052\uffd4\001\002\000\004" +
    "\023\323\001\002\000\020\006\uffd8\010\uffd8\016\uffd8\022" +
    "\uffd8\023\uffd8\060\uffd8\061\uffd8\001\002\000\006\051\uffd7" +
    "\052\uffd7\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\006\001\001\000\014\005\012" +
    "\006\013\007\014\010\011\011\007\001\001\000\004\113" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\105" +
    "\312\001\001\000\002\001\001\000\004\011\020\001\001" +
    "\000\004\107\021\001\001\000\006\012\024\013\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\034\013\022\001\001\000\002\001\001\000" +
    "\004\015\036\001\001\000\002\001\001\000\004\011\040" +
    "\001\001\000\002\001\001\000\006\010\042\011\007\001" +
    "\001\000\006\016\043\017\044\001\001\000\002\001\001" +
    "\000\006\020\046\021\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\051\025\050\001\001\000\004" +
    "\110\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\111\055\001\001\000\002\001\001" +
    "\000\012\011\057\022\062\023\061\024\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\064\001\001\000\010\010\065\011" +
    "\007\112\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\026\107\027\114\033\106\034\074\035\100\036" +
    "\102\037\075\040\111\041\076\042\070\066\103\067\112" +
    "\001\001\000\014\043\272\044\277\045\300\046\275\070" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\054\260\055\132\102\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\026\237\027\114\033\106\034" +
    "\074\035\100\036\102\037\075\040\111\041\076\042\070" +
    "\066\103\067\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\033\115\034\074\035\100" +
    "\036\102\037\075\040\111\041\076\042\070\066\103\067" +
    "\112\001\001\000\002\001\001\000\014\034\120\042\070" +
    "\066\103\067\112\100\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\054\127\055\132\071\126\073\124" +
    "\074\123\075\131\076\125\101\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\077\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\042\137\056\135\057\142" +
    "\061\146\062\143\064\136\065\134\066\103\067\112\001" +
    "\001\000\004\011\211\001\001\000\002\001\001\000\010" +
    "\045\203\047\206\060\207\001\001\000\002\001\001\000" +
    "\004\070\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\054\161\055\132\001\001\000\010\046\153\050\155" +
    "\063\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\042" +
    "\137\062\160\064\136\065\134\066\103\067\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\054\177\055\132\001\001\000\014" +
    "\051\170\052\173\053\172\054\171\055\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\054" +
    "\175\055\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\042\137\057\210\061" +
    "\146\062\143\064\136\065\134\066\103\067\112\001\001" +
    "\000\002\001\001\000\004\104\212\001\001\000\002\001" +
    "\001\000\006\054\214\055\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\054\127\055\132\076\217\001" +
    "\001\000\002\001\001\000\014\034\120\042\070\066\103" +
    "\067\112\100\221\001\001\000\002\001\001\000\026\033" +
    "\223\034\074\035\100\036\102\037\075\040\111\041\076" +
    "\042\070\066\103\067\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\054\233\055\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\054\127" +
    "\055\132\074\235\075\131\076\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\054\243\055\132\001\001\000" +
    "\004\103\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\054\127\055\132\071\252\073\124\074\123\075\131" +
    "\076\125\001\001\000\002\001\001\000\026\033\254\034" +
    "\074\035\100\036\102\037\075\040\111\041\076\042\070" +
    "\066\103\067\112\001\001\000\004\072\256\001\001\000" +
    "\026\033\257\034\074\035\100\036\102\037\075\040\111" +
    "\041\076\042\070\066\103\067\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\042\267\066\103\067\112\001\001" +
    "\000\004\070\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\051\302\052\173\053\172\054" +
    "\171\055\132\001\001\000\006\054\301\055\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\057\024\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\313\017\314\001\001" +
    "\000\004\106\315\001\001\000\006\020\046\021\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\321" +
    "\032\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 3;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init();
	parserHelper.initBool();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	Logger log = Logger.getLogger(getClass());

	ParserHelper parserHelper = new ParserHelper(this);
	
	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
	}

	public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // IndexingExpressionOpt ::= LINDEX Expression RINDEX 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IndexingExpressionOpt",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ConstructorCall ::= NEW Type IndexingExpressionOpt 
            {
              Object RESULT =null;
		int ClassNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int ClassNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj ClassName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstructorCall",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // FunctionCall ::= Designator LPAREN ActualParamListOpt RPAREN 
            {
              Object RESULT =null;
		int FunctionNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int FunctionNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object FunctionName = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FunctionCall",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NumConstOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumConstOpt",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NumConstOpt ::= COMMA NUMCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumConstOpt",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PrintStatement ::= PRINT LPAREN Expression NumConstOpt RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintStatement",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ReadStatement ::= READ LPAREN Designator RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReadStatement",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ReturnStatement ::= RETURN ExpressionOpt 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ForStatement ::= FOR LPAREN DesignatorStatementOpt SEMICOLON ConditionOpt SEMICOLON DesignatorStatementOpt RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatement",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Relop ::= LEQU 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Relop ::= LE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Relop ::= GTEQU 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Relop ::= GT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Relop ::= NOTEQU 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Relop ::= EQU 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ConditionFactor ::= Expression Relop Expression 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFactor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ConditionFactor ::= Expression 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFactor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ConditionFactorList ::= ConditionFactor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFactorList",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ConditionFactorList ::= ConditionFactorList AND ConditionFactor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFactorList",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ConditionTerm ::= ConditionFactorList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ConditionTermList ::= ConditionTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionTermList",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ConditionTermList ::= ConditionTermList OR ConditionTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionTermList",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Condition ::= ConditionTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ConditionOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionOpt",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ConditionOpt ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionOpt",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ElseOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseOpt",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ElseOpt ::= ELSE Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseOpt",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IfStatement ::= IF LPAREN Condition RPAREN Statement ElseOpt 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfStatement",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IndexingList ::= LINDEX Expression RINDEX 
            {
              Object RESULT =null;
		int IndexingExpressionleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int IndexingExpressionright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object IndexingExpression = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IndexingList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ArrayElemRef ::= Designator IndexingList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ArrayElemRef",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ObjectPropertyRef ::= Designator DOT IDENT 
            {
              Object RESULT =null;
		int propertyNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int propertyNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String propertyName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ObjectPropertyRef",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Designator ::= ArrayElemRef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Designator ::= ObjectPropertyRef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Designator ::= IDENT 
            {
              Object RESULT =null;
		int VarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int VarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String VarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // MulOpLeft ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // MulOpLeft ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MulOpLeft ::= MUL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpLeft",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // MulOp ::= MulOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // MulOp ::= MulOpLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AddOpLeft ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AddOpLeft ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpLeft",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // AddOp ::= AddOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOp",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // AddOp ::= AddOpLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOp",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Factor ::= LPAREN Expression RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Factor ::= ConstructorCall 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Factor ::= BOOLCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Factor ::= CHARCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Factor ::= NUMCONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Factor ::= FunctionCall 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Factor ::= Designator 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FactorList ::= Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorList",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FactorList ::= FactorList MulOp Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorList",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Term ::= FactorList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TermList ::= Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TermList ::= TermList AddOp Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MinusOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MinusOpt",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MinusOpt ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MinusOpt",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expression ::= MinusOpt TermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expression",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ExpressionOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpressionOpt",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ExpressionOpt ::= Expression 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpressionOpt",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ExpressionList ::= Expression 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpressionList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpressionList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ActualParamList ::= ExpressionList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ActualParamListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamListOpt",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ActualParamListOpt ::= ActualParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamListOpt",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MulOpRight ::= MODASSIGN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MulOpRight ::= DIVASSIGN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MulOpRight ::= MULASSIGN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulOpRight",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // AddOpRight ::= MINUSASSIGN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpRight",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // AddOpRight ::= PLUSASSIGN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddOpRight",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // AssignOperator ::= MulOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOperator",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // AssignOperator ::= AddOpRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOperator",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AssignOperator ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOperator",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DesignatorOperation ::= DECREMENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorOperation",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DesignatorOperation ::= INCREMENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorOperation",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DesignatorOperation ::= LPAREN ActualParamListOpt RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorOperation",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DesignatorOperation ::= AssignOperator Expression 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorOperation",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DesignatorStatement ::= Designator DesignatorOperation 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DesignatorStatementOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOpt",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DesignatorStatementOpt ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOpt",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StatementList ::= Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // StatementListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListOpt",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StatementListOpt ::= StatementList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListOpt",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= LCURLYBRACE StatementListOpt RCURLYBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= PrintStatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Statement ::= ReadStatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Statement ::= ReturnStatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Statement ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= ForStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= IfStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= DesignatorStatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Type ::= IDENT 
            {
              Obj RESULT =null;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String TypeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parser.parserHelper.typeNameToObj(TypeName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VariableDeclaration ::= IDENT LINDEX RINDEX 
            {
              Object RESULT =null;
		int VarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int VarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String VarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
							if(!parser.parserHelper.isInProgram())
								parser.parserHelper.globalArrayFound();

							Obj temp = Tab.find(VarName);
							if(temp == Tab.noObj) {
								parser.report_info("Array "+ VarName +" declared on line "+ VarNameleft, null);
								Tab.insert(Obj.Var, VarName, parser.parserHelper.getCurrentTypeDeclaration().getType());
							} else if (temp.getKind() == Obj.Meth) {
								parser.report_info("Array "+ VarName +" declared on line (has same name as a method)"+ VarNameleft, null);
								Tab.insert(Obj.Var, VarName, parser.parserHelper.getCurrentTypeDeclaration().getType());
							} else {
								parser.report_error("A constant or a variable with the same name as " + VarName + " is already defined!", null);
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VariableDeclaration ::= IDENT 
            {
              Object RESULT =null;
		int VarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int VarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String VarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							if(!parser.parserHelper.isInProgram())
								parser.parserHelper.globalVarFound();
							else if(parser.parserHelper.isInMain())
								parser.parserHelper.localVarFound();

							if(!parser.parserHelper.isInProgram())
								parser.parserHelper.globalConstFound();
							
							Obj temp = Tab.find(VarName);
							if(temp == Tab.noObj) {
								parser.report_info("Variable "+ VarName +" declared on line "+ VarNameleft, null);
								Tab.insert(Obj.Var, VarName, parser.parserHelper.getCurrentTypeDeclaration().getType());
							} else if (temp.getKind() == Obj.Meth) {
								parser.report_info("Variable "+ VarName +" declared on line (has same name as a method)"+ VarNameleft, null);
								Tab.insert(Obj.Var, VarName, parser.parserHelper.getCurrentTypeDeclaration().getType());
							} else {
								parser.report_error("A constant or a variable with the same name as " + VarName + " is already defined!", null);
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VariableDeclarationList ::= VariableDeclaration 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VariableDeclarationList ::= VariableDeclarationList COMMA VariableDeclaration 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VariableDeclarationWrapper ::= Type NT$6 VariableDeclarationList SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 parser.parserHelper.setCurrentTypeDeclaration(null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationWrapper",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$6 ::= 
            {
              Object RESULT =null;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parser.parserHelper.setCurrentTypeDeclaration(TypeName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VariableDeclarationWrapperListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationWrapperListOpt",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VariableDeclarationWrapperListOpt ::= VariableDeclarationWrapperListOpt VariableDeclarationWrapper 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationWrapperListOpt",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FormalParam ::= Type IDENT LINDEX RINDEX 
            {
              Object RESULT =null;
		int ParamNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int ParamNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String ParamName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParam",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormalParam ::= Type IDENT 
            {
              Object RESULT =null;
		int ParamNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ParamNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String ParamName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParam",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FormalParamList ::= FormalParam 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FormalParamList ::= FormalParamList COMMA FormalParam 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FormalParamListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamListOpt",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FormalParamListOpt ::= FormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamListOpt",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodReturnType ::= Type 
            {
              Obj RESULT =null;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = TypeName; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodReturnType ::= VOID 
            {
              Obj RESULT =null;
		 RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // StaticOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticOpt",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // StaticOpt ::= STATIC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticOpt",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MethodDeclaration ::= StaticOpt MethodReturnType NT$3 IDENT NT$4 LPAREN FormalParamListOpt RPAREN VariableDeclarationWrapperListOpt NT$5 LCURLYBRACE StatementListOpt RCURLYBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;
		int MethodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int MethodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String MethodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int MethodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int MethodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String MethodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
 parser.parserHelper.exitingMain(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int MethodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int MethodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String MethodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
						if(MethodName.equals("main"))
							parser.parserHelper.enteringMain();

						Obj temp = Tab.find(MethodName);
						if(temp == Tab.noObj)
						{
							parser.report_info("Method "+ MethodName+" declared on line "+ MethodNameleft, null);
							Tab.insert(Obj.Meth, MethodName, parser.parserHelper.getCurrentTypeDeclaration().getType());
						} else if (temp.getKind() != Obj.Meth) {
							parser.report_info("Method "+ MethodName+" declared on line (has same name as a var/const)"+ MethodNameleft, null);
							Tab.insert(Obj.Meth, MethodName, parser.parserHelper.getCurrentTypeDeclaration().getType());
						} else {
							parser.report_error("A constant or a variable with the same name as " + MethodName + " is already defined!", null);
						}
						
						parser.parserHelper.setCurrentTypeDeclaration(null);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$3 ::= 
            {
              Object RESULT =null;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parser.parserHelper.setCurrentTypeDeclaration(TypeName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MethodDeclarationListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclarationListOpt",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MethodDeclarationListOpt ::= MethodDeclarationListOpt MethodDeclaration 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclarationListOpt",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ClassBody ::= MethodDeclarationListOpt 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBody",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ExtendsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ExtendsOpt ::= EXTENDS Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ClassDeclaration ::= CLASS IDENT ExtendsOpt LCURLYBRACE VariableDeclarationWrapper ClassBody RCURLYBRACE 
            {
              Object RESULT =null;
		int ClassNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int ClassNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String ClassName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Constant ::= BOOLCONST 
            {
              Obj RESULT =null;
		int Constleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Constright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean Const = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parser.parserHelper.evaluateBoolConst(Const); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Constant ::= CHARCONST 
            {
              Obj RESULT =null;
		int Constleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Constright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character Const = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parser.parserHelper.evaluateCharConst(Const); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Constant ::= NUMCONST 
            {
              Obj RESULT =null;
		int Constleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Constright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer Const = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parser.parserHelper.evaluateNumConst(Const); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Constant",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstantDeclaration ::= IDENT ASSIGN Constant 
            {
              Object RESULT =null;
		int ConstNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int ConstNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String ConstName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int Constleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int Constright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj Const = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							if(!parser.parserHelper.isInProgram())
								parser.parserHelper.globalConstFound();
							
							Obj temp = Tab.find(ConstName);
							if(temp == Tab.noObj) {
								parser.report_info("Constant "+ ConstName+" declared on line "+ ConstNameleft, null);
								if(Const.getType().assignableTo(parser.parserHelper.getCurrentTypeDeclaration().getType())) {
									Obj myObj = Tab.insert(Obj.Con, ConstName, parser.parserHelper.getCurrentTypeDeclaration().getType());
									myObj.setAdr(Const.getAdr());
								}
								else {
									parser.report_error("Incompatible types", null);
								}
							} else if (temp.getKind() == Obj.Meth) {
								parser.report_info("Constant "+ ConstName+" declared on line (has same name as a method)"+ ConstNameleft, null);
								if(Const.getType().assignableTo(parser.parserHelper.getCurrentTypeDeclaration().getType())) {
									Obj myObj = Tab.insert(Obj.Con, ConstName, parser.parserHelper.getCurrentTypeDeclaration().getType());
									myObj.setAdr(Const.getAdr());
								}
								else {
									parser.report_error("Incompatible types", null);	
								}
							} else {
								parser.report_error("A constant or a variable with the same name as " + ConstName + " is already defined!", null);
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstantDeclaration",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstantDeclarationList ::= ConstantDeclaration COMMA ConstantDeclarationList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstantDeclarationList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstantDeclarationList ::= ConstantDeclaration 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstantDeclarationList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstantDeclarationWrapper ::= CONST Type NT$2 ConstantDeclarationList SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 parser.parserHelper.setCurrentTypeDeclaration(null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstantDeclarationWrapper",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
		int TypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int TypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj TypeName = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parser.parserHelper.setCurrentTypeDeclaration(TypeName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ProgramBody ::= MethodDeclarationListOpt 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramBody",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConcreteProgramDeclarations ::= VariableDeclarationWrapper 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConcreteProgramDeclarations",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConcreteProgramDeclarations ::= ClassDeclaration 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConcreteProgramDeclarations",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ConcreteProgramDeclarations ::= ConstantDeclarationWrapper 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConcreteProgramDeclarations",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgramDeclarationListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramDeclarationListOpt",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgramDeclarationListOpt ::= ProgramDeclarationListOpt ConcreteProgramDeclarations 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramDeclarationListOpt",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= PROGRAM IDENT ProgramDeclarationListOpt LCURLYBRACE NT$0 ProgramBody NT$1 RCURLYBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int ProgramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int ProgramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String ProgramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int ProgramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int ProgramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String ProgramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
 parser.parserHelper.exitingProgram(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int ProgramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int ProgramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String ProgramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
 parser.parserHelper.enteringProgram(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

